doit <- function(x) {
temp_x <- sample(x, replace = TRUE)
if(length(unique(temp_x)) > 30) {#only take mean if sample was sufficient
print(paste("Mean of this sample was:", as.character(mean(temp_x))))
}
else {
stop("Couldn't calculate mean: too few unique values!")
}
}
set.seed(1345)
popn <- rnorm(50)
hist(popn)
lapply(1:15, function(i) doit(popn))
result <- lapply(1:15, function(i) try(doit(popn), FALSE))
class(result)
result
result <- vector("list", 15) #Preallocate/Initialize
for(i in 1:15) {
result[[i]] <- try(doit(popn), FALSE)
}
result <- vector("list", 15) #Preallocate/Initialize
for(i in 1:15) {
result[[i]] <- tryCatch(doit(popn), FALSE)
}
##experiment with trycatch##
install.packages(c("tidyverse"))
for (i in 1:10) {
if ((i %% 2) == 0) # check if the number is odd
next # pass to next iteration of loop
print(i)
}
## Build a random matrix
M <- matrix(rnorm(100), 10, 10)
## Take the mean of each row
RowMeans <- apply(M, 1, mean)
print (RowMeans)
## Now the variance
RowVars <- apply(M, 1, var)
print (RowVars)
## By column
ColMeans <- apply(M, 2, mean)
print (ColMeans)
MyData <- read.csv("../data/trees.csv", header = TRUE) # import with headers
setwd("~/Documents/CMEEcoursework/week3/code")
MyData <- read.csv("../data/trees.csv", header = TRUE) # import with headers
write.csv(MyData, "../results/MyData.csv") #write it out as a new file
write.table(MyData[1,], file = "../results/MyData.csv",append=TRUE) # Append to it
write.csv(MyData, "../results/MyData.csv", row.names=TRUE) # write row names
write.table(MyData, "../results/MyData.csv", col.names=FALSE) # ignore column names
# Runs the stochastic Ricker equation with gaussian fluctuations
rm(list = ls())
stochrick <- function(p0 = runif(1000, .5, 1.5), r = 1.2, K = 1, sigma = 0.2,numyears = 100)
{
N <- matrix(NA, numyears, length(p0))  #initialize empty matrix
N[1, ] <- p0
for (pop in 1:length(p0)) { #loop through the populations
for (yr in 2:numyears){ #for each pop, loop through the years
N[yr, pop] <- N[yr-1, pop] * exp(r * (1 - N[yr - 1, pop] / K) + rnorm(1, 0, sigma)) # add one fluctuation from normal distribution
}
}
return(N)
}
# Now write another function called stochrickvect that vectorizes the above to
# the extent possible, with improved performance:
rm(list = ls())
stochrickvect <- function(p0 = runif(1000, .5, 1.5), r = 1.2, K = 1, sigma = 0.2,numyears = 100)
{
N <- matrix(NA, numyears, length(p0))  #initialize empty matrix
N[1, ] <- p0
for (yr in 2:numyears){ #for each pop, loop through the years
N[yr, (1:length(p0))] <- N[yr-1, (1:length(p0))] * exp(r * (1 - N[yr - 1, (1:length(p0))] / K) + rnorm(1, 0, sigma)) # add one fluctuation from normal distribution
}
return(N)
}
print("Non Vectorized Stochastic Ricker takes:")
print(system.time(res2<-stochrick()))
stochrickvect <- function(p0 = runif(1000, .5, 1.5), r = 1.2, K = 1, sigma = 0.2,numyears = 100)
{
N <- matrix(NA, numyears, length(p0))  #initialize empty matrix
N[1, ] <- p0
for (yr in 2:numyears){ #for each pop, loop through the years
N[yr, (1:length(p0))] <- N[yr-1, (1:length(p0))] * exp(r * (1 - N[yr - 1, (1:length(p0))] / K) + rnorm(1, 0, sigma)) # add one fluctuation from normal distribution
}
return(N)
}
print("Non Vectorized Stochastic Ricker takes:")
print(system.time(res2<-stochrick()))
stochrick <- function(p0 = runif(1000, .5, 1.5), r = 1.2, K = 1, sigma = 0.2,numyears = 100)
{
N <- matrix(NA, numyears, length(p0))  #initialize empty matrix
N[1, ] <- p0
for (pop in 1:length(p0)) { #loop through the populations
for (yr in 2:numyears){ #for each pop, loop through the years
N[yr, pop] <- N[yr-1, pop] * exp(r * (1 - N[yr - 1, pop] / K) + rnorm(1, 0, sigma)) # add one fluctuation from normal distribution
}
}
return(N)
}
stochrickvect <- function(p0 = runif(1000, .5, 1.5), r = 1.2, K = 1, sigma = 0.2,numyears = 100)
{
N <- matrix(NA, numyears, length(p0))  #initialize empty matrix
N[1, ] <- p0
for (yr in 2:numyears){ #for each pop, loop through the years
N[yr, (1:length(p0))] <- N[yr-1, (1:length(p0))] * exp(r * (1 - N[yr - 1, (1:length(p0))] / K) + rnorm(1, 0, sigma)) # add one fluctuation from normal distribution
}
return(N)
}
print(system.time(res2<-stochrick()))
print(system.time(res2<-stochrickvect()))
doit <- function(x) {
temp_x <- sample(x, replace = TRUE)
if(length(unique(temp_x)) > 30) {#only take mean if sample was sufficient
print(paste("Mean of this sample was:", as.character(mean(temp_x))))
}
else {
stop("Couldn't calculate mean: too few unique values!")
}
}
#generating the population
set.seed(1345)
popn <- rnorm(50)
hist(popn)
#lapply(1:15, function(i) doit(popn))
result <- lapply(1:15, function(i) try(doit(popn), FALSE))
#the FALSE modifier for the try command supresses any error messages
#but the results will catch the errors so can be insepcted later
class(result)
result
result <- vector("list", 15) #Preallocate/Initialize
for(i in 1:15) {
result[[i]] <- try(doit(popn), FALSE)
}
doit <- function(x) {
temp_x <- sample(x, replace = TRUE)
if(length(unique(temp_x)) > 30) {#only take mean if sample was sufficient
print(paste("Mean of this sample was:", as.character(mean(temp_x))))
}
else {
stop("Couldn't calculate mean: too few unique values!")
}
}
set.seed(1345) # again, to get the same result for illustration
popn <- rnorm(50)
hist(popn)
lapply(1:15, function(i) doit(popn))
doit <- function(x) {
temp_x <- sample(x, replace = TRUE)
if(length(unique(temp_x)) > 30) {#only take mean if sample was sufficient
print(paste("Mean of this sample was:", as.character(mean(temp_x))))
}
else {
stop("Couldn't calculate mean: too few unique values!")
}
}
set.seed(1345) # again, to get the same result for illustration
popn <- rnorm(50)
hist(popn)
lapply(1:15, function(i) doit(popn))
doit <- function(x) {
temp_x <- sample(x, replace = TRUE)
if(length(unique(temp_x)) > 30) {#only take mean if sample was sufficient
print(paste("Mean of this sample was:", as.character(mean(temp_x))))
}
else {
stop("Couldn't calculate mean: too few unique values!")
}
}
set.seed(1345) # again, to get the same result for illustration
popn <- rnorm(50)
hist(popn)
lapply(1:15, function(i) doit(popn))
rm(list = ls()) #clear environment
df <- read.csv("../data/EcolArchives-E089-51-D1.csv") #read data set
df$Prey.mass[which(df$Prey.mass.unit=="mg")] <- df$Prey.mass[which(df$Prey.mass.unit=="mg")]/1000
df$Prey.mass.unit[which(df$Prey.mass.unit=="mg")] <- "g"
#load packages
library(dplyr)
library(ggplot2)
library(ggpubr)
theme_set(theme_minimal()) #setting theme for plots
splitdfs <- group_split(df, Type.of.feeding.interaction)
## Figure 1: predator mass distributions
insect_pred <- ggplot(splitdfs[[1]], aes(x = log(Predator.mass))) +
geom_histogram(fill = "#69b3a2",
color = "#e9ecef",
alpha = 0.9) +
ggtitle("Insectivorous") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("log Predator mass (g)") +
ylab("Frequency")
pisci_pred <-ggplot(splitdfs[[2]], aes(x = log(Predator.mass))) +
geom_histogram(fill = "#69b3a2",
color = "#e9ecef",
alpha = 0.9) +
ggtitle("Piscivorous") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("log Predator mass (g)") +
ylab("Frequency")
plank_pred <- ggplot(splitdfs[[3]], aes(x = log(Predator.mass))) +
geom_histogram(fill = "#69b3a2",
color = "#e9ecef",
alpha = 0.9) +
ggtitle("Planktivorous") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("log Predator mass (g)") +
ylab("Frequency")
pred_pred <- ggplot(splitdfs[[4]], aes(x = log(Predator.mass))) +
geom_histogram(fill = "#69b3a2",
color = "#e9ecef",
alpha = 0.9) +
ggtitle("Predacious") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("log Predator mass (g)") +
ylab("Frequency")
pred_pisci_pred <- ggplot(splitdfs[[5]], aes(x = log(Predator.mass))) +
geom_histogram(fill = "#69b3a2",
color = "#e9ecef",
alpha = 0.9) +
ggtitle("Predacious/Piscivorous") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("log Predator mass (g)") +
ylab("Frequency")
allpreds <- ggarrange(insect_pred, pisci_pred, plank_pred, pred_pisci_pred, pred_pred)
pdf("../results/Pred_Subplots.pdf", paper = "a4")
annotate_figure(allpreds, top = "Predator Mass Distributions by Feeding Interaction Type")
dev.off()
## Figure 2: prey mass distributions
insect_prey <- ggplot(splitdfs[[1]], aes(x = log(Prey.mass))) +
geom_histogram(fill = "#69b3a2",
color = "#e9ecef",
alpha = 0.9) +
ggtitle("Insectivorous") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("log Prey mass (g)") +
ylab("Frequency")
pisci_prey <-ggplot(splitdfs[[2]], aes(x = log(Prey.mass))) +
geom_histogram(fill = "#69b3a2",
color = "#e9ecef",
alpha = 0.9) +
ggtitle("Piscivorous") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("log Prey mass (g)") +
ylab("Frequency")
plank_prey <- ggplot(splitdfs[[3]], aes(x = log(Prey.mass))) +
geom_histogram(fill = "#69b3a2",
color = "#e9ecef",
alpha = 0.9) +
ggtitle("Planktivorous") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("log Prey mass (g)") +
ylab("Frequency")
pred_prey <- ggplot(splitdfs[[4]], aes(x = log(Prey.mass))) +
geom_histogram(fill = "#69b3a2",
color = "#e9ecef",
alpha = 0.9) +
ggtitle("Predacious") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("log Prey mass (g)") +
ylab("Frequency")
pred_pisci_prey <- ggplot(splitdfs[[5]], aes(x = log(Prey.mass))) +
geom_histogram(fill = "#69b3a2",
color = "#e9ecef",
alpha = 0.9) +
ggtitle("Predacious/Piscivorous") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("log Prey mass (g)") +
ylab("Frequency")
allpreys <- ggarrange(insect_prey, pisci_prey, plank_prey, pred_pisci_prey, pred_prey)
pdf("../results/Prey_Subplots.pdf", paper = "a4")
annotate_figure(allpreys, top = "Prey Mass Distributions by Feeding Interaction Type")
dev.off()
## Figure 3: ratio mass distributions
insect_rat <- ggplot(splitdfs[[1]], aes(x = log(Prey.mass/Predator.mass))) +
geom_histogram(fill = "#69b3a2",
color = "#e9ecef",
alpha = 0.9) +
ggtitle("Insectivorous") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("log Prey Predator Size Ratio (g)") +
ylab("Frequency")
pisci_rat <-ggplot(splitdfs[[2]], aes(x = log(Prey.mass/Predator.mass))) +
geom_histogram(fill = "#69b3a2",
color = "#e9ecef",
alpha = 0.9) +
ggtitle("Piscivorous") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("log Prey Predator Size Ratio (g)") +
ylab("Frequency")
plank_rat <- ggplot(splitdfs[[3]], aes(x = log(Prey.mass/Predator.mass))) +
geom_histogram(fill = "#69b3a2",
color = "#e9ecef",
alpha = 0.9) +
ggtitle("Planktivorous") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("log Prey Predator Size Ratio (g)") +
ylab("Frequency")
pred_rat <- ggplot(splitdfs[[4]], aes(x = log(Prey.mass/Predator.mass))) +
geom_histogram(fill = "#69b3a2",
color = "#e9ecef",
alpha = 0.9) +
ggtitle("Predacious") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("log Prey Predator Size Ratio (g)") +
ylab("Frequency")
pred_pisci_rat <- ggplot(splitdfs[[5]], aes(x = log(Prey.mass/Predator.mass))) +
geom_histogram(fill = "#69b3a2",
color = "#e9ecef",
alpha = 0.9) +
ggtitle("Predacious/Piscivorous") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("log Prey Predator Size Ratio (g)") +
ylab("Frequency")
allrats <- ggarrange(insect_rat, pisci_rat, plank_rat, pred_pisci_rat, pred_rat)
pdf("../results/SizeRatio_Subplots.pdf", paper = "a4")
annotate_figure(allrats, top = "Prey-Predator Size Ratio Distributions by Feeding Interaction Type")
dev.off()
#csv file
columns = c("Classification", "Feeding type", "Mean", "Median")
means_n_medians <- as.data.frame(matrix(nrow = 0, ncol = length(columns)))
for (feedingtype in splitdfs){
predmean <- mean(log(feedingtype$Predator.mass))
predmedian <- median(log(feedingtype$Predator.mass))
predoutput <- c("Predator", feedingtype$Type.of.feeding.interaction[1], predmean, predmedian)
means_n_medians <- rbind(means_n_medians, predoutput)
preymean <- mean(log(feedingtype$Prey.mass))
preymedian <- median(log(feedingtype$Prey.mass))
preyoutput <- c("Prey", feedingtype$Type.of.feeding.interaction[1], preymean, preymedian)
means_n_medians <- rbind(means_n_medians, preyoutput)
ratmean <- mean(log(feedingtype$Prey.mass/feedingtype$Predator.mass))
ratmedian <- median(log(feedingtype$Prey.mass/feedingtype$Predator.mass))
ratoutput <- c("Size ratio", feedingtype$Type.of.feeding.interaction[1], ratmean, ratmedian)
means_n_medians <- rbind(means_n_medians, ratoutput)
}
colnames(means_n_medians) <- columns
write_csv(means_n_medians, "../results/PP_results.csv")
library(readr)
rm(list = ls()) #clear environment
df <- read.csv("../data/EcolArchives-E089-51-D1.csv") #read data set
df$Prey.mass[which(df$Prey.mass.unit=="mg")] <- df$Prey.mass[which(df$Prey.mass.unit=="mg")]/1000
df$Prey.mass.unit[which(df$Prey.mass.unit=="mg")] <- "g"
#load packages
library(dplyr)
library(ggplot2)
library(ggpubr)
library(readr)
theme_set(theme_minimal()) #setting theme for plots
splitdfs <- group_split(df, Type.of.feeding.interaction)
## Figure 1: predator mass distributions
insect_pred <- ggplot(splitdfs[[1]], aes(x = log(Predator.mass))) +
geom_histogram(fill = "#69b3a2",
color = "#e9ecef",
alpha = 0.9) +
ggtitle("Insectivorous") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("log Predator mass (g)") +
ylab("Frequency")
pisci_pred <-ggplot(splitdfs[[2]], aes(x = log(Predator.mass))) +
geom_histogram(fill = "#69b3a2",
color = "#e9ecef",
alpha = 0.9) +
ggtitle("Piscivorous") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("log Predator mass (g)") +
ylab("Frequency")
plank_pred <- ggplot(splitdfs[[3]], aes(x = log(Predator.mass))) +
geom_histogram(fill = "#69b3a2",
color = "#e9ecef",
alpha = 0.9) +
ggtitle("Planktivorous") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("log Predator mass (g)") +
ylab("Frequency")
pred_pred <- ggplot(splitdfs[[4]], aes(x = log(Predator.mass))) +
geom_histogram(fill = "#69b3a2",
color = "#e9ecef",
alpha = 0.9) +
ggtitle("Predacious") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("log Predator mass (g)") +
ylab("Frequency")
pred_pisci_pred <- ggplot(splitdfs[[5]], aes(x = log(Predator.mass))) +
geom_histogram(fill = "#69b3a2",
color = "#e9ecef",
alpha = 0.9) +
ggtitle("Predacious/Piscivorous") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("log Predator mass (g)") +
ylab("Frequency")
allpreds <- ggarrange(insect_pred, pisci_pred, plank_pred, pred_pisci_pred, pred_pred)
pdf("../results/Pred_Subplots.pdf", paper = "a4")
annotate_figure(allpreds, top = "Predator Mass Distributions by Feeding Interaction Type")
dev.off()
## Figure 2: prey mass distributions
insect_prey <- ggplot(splitdfs[[1]], aes(x = log(Prey.mass))) +
geom_histogram(fill = "#69b3a2",
color = "#e9ecef",
alpha = 0.9) +
ggtitle("Insectivorous") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("log Prey mass (g)") +
ylab("Frequency")
pisci_prey <-ggplot(splitdfs[[2]], aes(x = log(Prey.mass))) +
geom_histogram(fill = "#69b3a2",
color = "#e9ecef",
alpha = 0.9) +
ggtitle("Piscivorous") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("log Prey mass (g)") +
ylab("Frequency")
plank_prey <- ggplot(splitdfs[[3]], aes(x = log(Prey.mass))) +
geom_histogram(fill = "#69b3a2",
color = "#e9ecef",
alpha = 0.9) +
ggtitle("Planktivorous") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("log Prey mass (g)") +
ylab("Frequency")
pred_prey <- ggplot(splitdfs[[4]], aes(x = log(Prey.mass))) +
geom_histogram(fill = "#69b3a2",
color = "#e9ecef",
alpha = 0.9) +
ggtitle("Predacious") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("log Prey mass (g)") +
ylab("Frequency")
pred_pisci_prey <- ggplot(splitdfs[[5]], aes(x = log(Prey.mass))) +
geom_histogram(fill = "#69b3a2",
color = "#e9ecef",
alpha = 0.9) +
ggtitle("Predacious/Piscivorous") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("log Prey mass (g)") +
ylab("Frequency")
allpreys <- ggarrange(insect_prey, pisci_prey, plank_prey, pred_pisci_prey, pred_prey)
pdf("../results/Prey_Subplots.pdf", paper = "a4")
annotate_figure(allpreys, top = "Prey Mass Distributions by Feeding Interaction Type")
dev.off()
## Figure 3: ratio mass distributions
insect_rat <- ggplot(splitdfs[[1]], aes(x = log(Prey.mass/Predator.mass))) +
geom_histogram(fill = "#69b3a2",
color = "#e9ecef",
alpha = 0.9) +
ggtitle("Insectivorous") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("log Prey Predator Size Ratio (g)") +
ylab("Frequency")
pisci_rat <-ggplot(splitdfs[[2]], aes(x = log(Prey.mass/Predator.mass))) +
geom_histogram(fill = "#69b3a2",
color = "#e9ecef",
alpha = 0.9) +
ggtitle("Piscivorous") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("log Prey Predator Size Ratio (g)") +
ylab("Frequency")
plank_rat <- ggplot(splitdfs[[3]], aes(x = log(Prey.mass/Predator.mass))) +
geom_histogram(fill = "#69b3a2",
color = "#e9ecef",
alpha = 0.9) +
ggtitle("Planktivorous") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("log Prey Predator Size Ratio (g)") +
ylab("Frequency")
pred_rat <- ggplot(splitdfs[[4]], aes(x = log(Prey.mass/Predator.mass))) +
geom_histogram(fill = "#69b3a2",
color = "#e9ecef",
alpha = 0.9) +
ggtitle("Predacious") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("log Prey Predator Size Ratio (g)") +
ylab("Frequency")
pred_pisci_rat <- ggplot(splitdfs[[5]], aes(x = log(Prey.mass/Predator.mass))) +
geom_histogram(fill = "#69b3a2",
color = "#e9ecef",
alpha = 0.9) +
ggtitle("Predacious/Piscivorous") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("log Prey Predator Size Ratio (g)") +
ylab("Frequency")
allrats <- ggarrange(insect_rat, pisci_rat, plank_rat, pred_pisci_rat, pred_rat)
pdf("../results/SizeRatio_Subplots.pdf", paper = "a4")
annotate_figure(allrats, top = "Prey-Predator Size Ratio Distributions by Feeding Interaction Type")
dev.off()
#csv file
columns = c("Classification", "Feeding type", "Mean", "Median")
means_n_medians <- as.data.frame(matrix(nrow = 0, ncol = length(columns)))
for (feedingtype in splitdfs){
predmean <- mean(log(feedingtype$Predator.mass))
predmedian <- median(log(feedingtype$Predator.mass))
predoutput <- c("Predator", feedingtype$Type.of.feeding.interaction[1], predmean, predmedian)
means_n_medians <- rbind(means_n_medians, predoutput)
preymean <- mean(log(feedingtype$Prey.mass))
preymedian <- median(log(feedingtype$Prey.mass))
preyoutput <- c("Prey", feedingtype$Type.of.feeding.interaction[1], preymean, preymedian)
means_n_medians <- rbind(means_n_medians, preyoutput)
ratmean <- mean(log(feedingtype$Prey.mass/feedingtype$Predator.mass))
ratmedian <- median(log(feedingtype$Prey.mass/feedingtype$Predator.mass))
ratoutput <- c("Size ratio", feedingtype$Type.of.feeding.interaction[1], ratmean, ratmedian)
means_n_medians <- rbind(means_n_medians, ratoutput)
}
colnames(means_n_medians) <- columns
write_csv(means_n_medians, "../results/PP_results.csv")
#install maps package
install.packages("maps")
library(maps)
#load data
load("../data/GPDDFiltered.RData")
#explore function
?map
#plotting data onto world map
map()
points(gpdd, col = "green")
#Majority of the datapoints are Europe/Northern Hemisphere. This could lead to biased results as this area has been disproportionately over-represented
