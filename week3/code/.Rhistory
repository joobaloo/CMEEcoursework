a <- c(a, i) # concatenate
print(a)
print(object.size(a))
}
}
system.time(NoPreallocFun(10))
NoPreallocFun <- function(x) {
a <- vector() # empty vector
for (i in 1:x) {
a <- c(a, i) # concatenate
print(a)
print(object.size(a))
}
}
system.time(NoPreallocFun(10))
PreallocFun <- function(x) {
a <- rep(NA, x) # pre-allocated vector
for (i in 1:x) {
a[i] <- i # assign
print(a)
print(object.size(a))
}
}
system.time(PreallocFun(10))
system.time(NoPreallocFun(10))
system.time(PreallocFun(10))
NoPreallocFun <- function(x) {
a <- vector() # empty vector
for (i in 1:x) {
a <- c(a, i) # concatenate
#print(a)
#print(object.size(a))
}
}
PreallocFun <- function(x) {
a <- rep(NA, x) # pre-allocated vector
for (i in 1:x) {
a[i] <- i # assign
#print(a)
#print(object.size(a))
}
}
system.time(NoPreallocFun(1000))
system.time(PreallocFun(1000))
## Build a random matrix
M <- matrix(rnorm(100), 10, 10)
## Take the mean of each row
RowMeans <- apply(M, 1, mean)
print (RowMeans)
## Now the variance
RowVars <- apply(M, 1, var)
print (RowVars)
## By column
ColMeans <- apply(M, 2, mean)
print (ColMeans)
someoperation <- function(v) {
if (sum(v) > 0) {
return (v * 100)
} else {
return (v)
}
}
M <- matrix(rnorm(100), 10 , 10)
print (apply(M, 1, someoperation))
######### Functions ##########
## A function to take a sample of size n from a population "popn" and return its mean
myexperiment <- function(popn,n) {
pop_sample <- sample(popn, n, replace = FALSE)
return(mean(pop_sample))
}
## Calculate means using a FOR loop on a vector without preallocation:
loopy_sample1 <- function(popn, n, num) {
result1 <- vector() #Initialize empty vector of size 1
for(i in 1:num) {
result1 <- c(result1, myexperiment(popn, n))
}
return(result1)
}
## To run "num" iterations of the experiment using a FOR loop on a vector with preallocation:
loopy_sample2 <- function(popn, n, num) {
result2 <- vector(,num) #Preallocate expected size
for(i in 1:num) {
result2[i] <- myexperiment(popn, n)
}
return(result2)
}
## To run "num" iterations of the experiment using a FOR loop on a list with preallocation:
loopy_sample3 <- function(popn, n, num) {
result3 <- vector("list", num) #Preallocate expected size
for(i in 1:num) {
result3[[i]] <- myexperiment(popn, n)
}
return(result3)
}
## To run "num" iterations of the experiment using vectorization with lapply:
lapply_sample <- function(popn, n, num) {
result4 <- lapply(1:num, function(i) myexperiment(popn, n))
return(result4)
}
## To run "num" iterations of the experiment using vectorization with sapply:
sapply_sample <- function(popn, n, num) {
result5 <- sapply(1:num, function(i) myexperiment(popn, n))
return(result5)
}
set.seed(12345)
popn <- rnorm(10000) # Generate the population
hist(popn)
n <- 100 # sample size for each experiment
num <- 10000 # Number of times to rerun the experiment
print("Using loops without preallocation on a vector took:" )
print(system.time(loopy_sample1(popn, n, num)))
print("Using loops with preallocation on a vector took:" )
print(system.time(loopy_sample2(popn, n, num)))
print("Using loops with preallocation on a list took:" )
print(system.time(loopy_sample3(popn, n, num)))
print("Using the vectorized sapply function (on a list) took:" )
print(system.time(sapply_sample(popn, n, num)))
print("Using the vectorized lapply function (on a list) took:" )
print(system.time(lapply_sample(popn, n, num)))
Exponential <- function(N0 = 1, r = 1, generations = 10) {
# Runs a simulation of exponential growth
# Returns a vector of length generations
N <- rep(NA, generations)    # Creates a vector of NA
N[1] <- N0
for (t in 2:generations) {
N[t] <- N[t-1] * exp(r)
browser()
}
return (N)
}
plot(Exponential(), type="l", main="Exponential growth")
n\c
q
q
doit <- function(x) {
temp_x <- sample(x, replace = TRUE)
if(length(unique(temp_x)) > 30) {#only take mean if sample was sufficient
print(paste("Mean of this sample was:", as.character(mean(temp_x))))
}
else {
stop("Couldn't calculate mean: too few unique values!")
}
}
doit <- function(x) {
temp_x <- sample(x, replace = TRUE)
if(length(unique(temp_x)) > 30) {#only take mean if sample was sufficient
print(paste("Mean of this sample was:", as.character(mean(temp_x))))
}
else {
stop("Couldn't calculate mean: too few unique values!")
}
}
doit <- function(x) {
temp_x <- sample(x, replace = TRUE)
if(length(unique(temp_x)) > 30) {#only take mean if sample was sufficient
print(paste("Mean of this sample was:", as.character(mean(temp_x))))
}
else {
stop("Couldn't calculate mean: too few unique values!")
}
}
set.seed(1345)
popn <- rnorm(50)
hist(popn)
lapply(1:15, function(i) doit(popn))
result <- lapply(1:15, function(i) try(doit(popn), FALSE))
class(result)
result
result <- vector("list", 15) #Preallocate/Initialize
for(i in 1:15) {
result[[i]] <- try(doit(popn), FALSE)
}
result <- vector("list", 15) #Preallocate/Initialize
for(i in 1:15) {
result[[i]] <- tryCatch(doit(popn), FALSE)
}
##experiment with trycatch##
install.packages(c("tidyverse"))
rm(list = ls())
stochrickvect <- function(p0 = runif(1000, .5, 1.5), r = 1.2, K = 1, sigma = 0.2,numyears = 100)
{
N <- matrix(NA, numyears, length(p0))  #initialize empty matrix
N[1, ] <- p0
for (yr in 2:numyears){ #for each pop, loop through the years
N[yr, pop] <- N[yr-1, pop] * exp(r * (1 - N[yr - 1, pop] / K) + rnorm(1, 0, sigma)) # add one fluctuation from normal distribution
}
return(N)
}
print("Vectorized Stochastic Ricker takes:", system.time(res2<-stochrickvect()))
rm(list = ls())
stochrickvect <- function(p0 = runif(1000, .5, 1.5), r = 1.2, K = 1, sigma = 0.2,numyears = 100)
{
N <- matrix(NA, numyears, length(p0))  #initialize empty matrix
N[1, ] <- p0
for (yr in 2:numyears){ #for each pop, loop through the years
N[yr, pop] <- N[yr-1, (1:length(p0))] * exp(r * (1 - N[yr - 1, (1:length(p0))] / K) + rnorm(1, 0, sigma)) # add one fluctuation from normal distribution
}
return(N)
}
print("Vectorized Stochastic Ricker takes:", system.time(res2<-stochrickvect()))
rm(list = ls())
stochrickvect <- function(p0 = runif(1000, .5, 1.5), r = 1.2, K = 1, sigma = 0.2,numyears = 100)
{
N <- matrix(NA, numyears, length(p0))  #initialize empty matrix
N[1, ] <- p0
for (yr in 2:numyears){ #for each pop, loop through the years
N[yr, (1:length(p0))] <- N[yr-1, (1:length(p0))] * exp(r * (1 - N[yr - 1, (1:length(p0))] / K) + rnorm(1, 0, sigma)) # add one fluctuation from normal distribution
}
return(N)
}
print("Vectorized Stochastic Ricker takes:", system.time(res2<-stochrickvect()))
print(system.time(res2<-stochrickvect()))
rm(list = ls())
stochrick <- function(p0 = runif(1000, .5, 1.5), r = 1.2, K = 1, sigma = 0.2,numyears = 100)
{
N <- matrix(NA, numyears, length(p0))  #initialize empty matrix
N[1, ] <- p0
for (pop in 1:length(p0)) { #loop through the populations
for (yr in 2:numyears){ #for each pop, loop through the years
N[yr, pop] <- N[yr-1, pop] * exp(r * (1 - N[yr - 1, pop] / K) + rnorm(1, 0, sigma)) # add one fluctuation from normal distribution
}
}
return(N)
}
print("Non Vectorized Stochastic Ricker takes:")
print(system.time(res2<-stochrick()))
setwd("~/Documents/CMEEcoursework/week3/code")
rm(list = ls()) #clear environment
df <- read.csv("../data/EcolArchives-E089-51-D1.csv") #read data set
require(dplyr)
require(ggplot2)
require(ggpubr)
View(df)
splitdfs <- group_split(df, Predator.lifestage)
View(splitdfs)
adult <- splitdfs[[1]]
juve <- splitdfs[[2]]
larva <- splitdfs[[3]]
jularva <- splitdfs[[4]]
postlarva <- splitdfs[[5]]
pljuve <- splitdfs[[6]]
df$Prey.mass[which(df$Prey.mass.unit=="mg")] <- df$Prey.mass[which(df$Prey.mass.unit=="mg")]/1000
df$Prey.mass.unit[which(df$Prey.mass.unit=="mg")] <- "g"
splitdfs <- group_split(df, Predator.lifestage)
splitdfs <- group_split(df, Type.of.feeding.interaction)
df <- read.csv("../data/EcolArchives-E089-51-D1.csv") #read data set
require(dplyr)
require(ggplot2)
df$Prey.mass[which(df$Prey.mass.unit=="mg")] <- df$Prey.mass[which(df$Prey.mass.unit=="mg")]/1000
df$Prey.mass.unit[which(df$Prey.mass.unit=="mg")] <- "g"
splitdfs <- group_split(df, Type.of.feeding.interaction)
require(grid)
for (feedingtype in splitdfs){
ggplot(feedingtype, aes(x = log(feedingtype$Prey.mass, y = log(feedingtype$Predator.mass)))) +
geom_point() +
geom_smooth(method = 'lm')
}
plots <- for (feedingtype in splitdfs){
ggplot(feedingtype, aes(x = log(feedingtype$Prey.mass, y = log(feedingtype$Predator.mass)))) +
geom_point() +
geom_smooth(method = 'lm')
}
plots
ggplot(splitdfs[[1]], aes(x = log(splitdfs[[1]]$Prey.mass, y = log(splitdfs[[1]]$Predator.mass)))) +
geom_point() +
geom_smooth(method = 'lm')
ggplot(splitdfs[[1]], aes(x = log(Prey.mass), y = log(Predator.mass))) +
geom_point() +
geom_smooth(method = 'lm')
for (feedingtype in splitdfs){
ggplot(feedingtype, aes(x = log(Prey.mass), y = log(Predator.mass))) +
geom_point() +
geom_smooth(method = 'lm')
}
for (feedingtype in splitdfs){
plot <- ggplot(feedingtype, aes(x = log(Prey.mass), y = log(Predator.mass))) +
geom_point() +
geom_smooth(method = 'lm')
print(plot)
}
p + geom_smooth(aes(group = Predator.lifestage), method = "lm")
p <- ggplot(splitdfs[[1]], aes(Prey.mass, Predator.mass)) +
geom_smooth(aes(group = Predator.lifestage), method = "lm")
p
p <- ggplot(splitdfs[[1]], aes(Prey.mass, Predator.mass))
p + geom_smooth(aes(group = Predator.lifestage), method = "lm")
ggplot(splitdfs[[1]], aes(x = log(Prey.mass), y = log(Predator.mass))) +
geom_point() +
geom_smooth(method = 'lm', col = "red")
ggplot(splitdfs[[1]], aes(x = log(Prey.mass), y = log(Predator.mass), colour = Predator.lifestage)) +
geom_point() +
geom_smooth(method = 'lm', col = "red")
insect <- splitdfs[[1]]
View(insect)
ggplot(df, aes(x = log(Prey.mass), y = log(Predator.mass), colour = Predator.lifestage)) +
geom_point() +
geom_smooth(method = 'lm', col = "red")
ggplot(df, aes(x = log(Prey.mass), y = log(Predator.mass), colour = Predator.lifestage)) +
geom_point() +
geom_smooth(method = 'lm', col = "red") +
facet_grid(rows = vars(Type.of.feeding.interaction))
View(splitdfs)
rm(list = ls()) #clear environment
df <- read.csv("../data/EcolArchives-E089-51-D1.csv") #read data set
#load packages
require(dplyr)
require(ggplot2)
require(grid)
#convert mg into g
df$Prey.mass[which(df$Prey.mass.unit=="mg")] <- df$Prey.mass[which(df$Prey.mass.unit=="mg")]/1000
df$Prey.mass.unit[which(df$Prey.mass.unit=="mg")] <- "g"
splitdfs <- group_split(df, Type.of.feeding.interaction)
insect <- splitdfs[[1]]
plot <- ggplot(df, aes(x = log(Prey.mass), y = log(Predator.mass), colour = Predator.lifestage)) +
geom_point() +
geom_smooth(method = 'lm', col = "red") +
facet_grid(rows = vars(Type.of.feeding.interaction))
plot
ggplot(df, aes(x = log(Prey.mass), y = log(Predator.mass), colour = Predator.lifestage)) +
geom_point() +
stat_smooth(method = 'lm', col = "red") +
facet_grid(rows = vars(Type.of.feeding.interaction))
ggplot(df, aes(x = log(Prey.mass), y = log(Predator.mass), colour = Predator.lifestage)) +
geom_point() +
geom_smooth(method = 'lm', col = "red", se = TRUE, fullrange = TRUE) +
facet_grid(rows = vars(Type.of.feeding.interaction))
ggplot(df, aes(x = log(Prey.mass), y = log(Predator.mass), colour = Predator.lifestage)) +
geom_point() +
geom_smooth(method = 'lm', se = TRUE, fullrange = TRUE) +
facet_grid(rows = vars(Type.of.feeding.interaction))
ggplot(df, aes(x = log(Prey.mass), y = log(Predator.mass), colour = Predator.lifestage)) +
geom_point(shape = 3) +
geom_smooth(method = 'lm', se = TRUE, fullrange = TRUE, size = 0.4) +
facet_grid(rows = vars(Type.of.feeding.interaction)) +
theme(legend.position = "bottom", legend.tite = element_text(face = "bold"))
ggplot(df, aes(x = log(Prey.mass), y = log(Predator.mass), colour = Predator.lifestage)) +
geom_point(shape = 3) +
geom_smooth(method = 'lm', se = TRUE, fullrange = TRUE, size = 0.4) +
facet_grid(rows = vars(Type.of.feeding.interaction)) +
theme(legend.position = "bottom", legend.title = element_text(face = "bold"))
ggplot(df, aes(x = log(Prey.mass), y = log(Predator.mass), colour = Predator.lifestage)) +
geom_point(shape = 3) +
geom_smooth(method = 'lm', se = TRUE, fullrange = TRUE, size = 0.4) +
facet_grid(rows = vars(Type.of.feeding.interaction)) +
xlab("Prey Mass in grams") +
ylab("Predator Mass in grams") +
theme(legend.position = "bottom", legend.title = element_text(face = "bold"))
require(scales)
require(scales)
ggplot(df, aes(x = log(Prey.mass), y = log(Predator.mass), colour = Predator.lifestage)) +
geom_point(shape = 3) +
geom_smooth(method = 'lm', se = TRUE, fullrange = TRUE, size = 0.4) +
facet_grid(rows = vars(Type.of.feeding.interaction)) +
xlab("Prey Mass in grams") +
ylab("Predator Mass in grams") +
scale_x_log10("Prey Mass in grams", labels = scales::scientific) +
scale_y_log10("Predator Mass in grams", labels = scales::scientific)
theme(legend.position = "bottom", legend.title = element_text(face = "bold"))
ggplot(df, aes(x = log(Prey.mass), y = log(Predator.mass), colour = Predator.lifestage)) +
geom_point(shape = 3) +
geom_smooth(method = 'lm', se = TRUE, fullrange = TRUE, size = 0.4) +
facet_grid(rows = vars(Type.of.feeding.interaction)) +
xlab("Prey Mass in grams") +
ylab("Predator Mass in grams") +
scale_x_log10("Prey Mass in grams", labels = scales::scientific) +
scale_y_log10("Predator Mass in grams", labels = scales::scientific) +
theme(legend.position = "bottom", legend.title = element_text(face = "bold"))
ggplot(df, aes(x = Prey.mass, y = Predator.mass, colour = Predator.lifestage)) +
geom_point(shape = 3) +
geom_smooth(method = 'lm', se = TRUE, fullrange = TRUE, size = 0.4) +
facet_grid(rows = vars(Type.of.feeding.interaction)) +
xlab("Prey Mass in grams") +
ylab("Predator Mass in grams") +
scale_x_log10("Prey Mass in grams", labels = scales::scientific) +
scale_y_log10("Predator Mass in grams", labels = scales::scientific) +
theme(legend.position = "bottom", legend.title = element_text(face = "bold"))
ggplot(df, aes(x = log(Prey.mass), y = log(Predator.mass), colour = Predator.lifestage)) +
geom_point(shape = 3) +
geom_smooth(method = 'lm', se = TRUE, fullrange = TRUE, size = 0.4) +
facet_grid(rows = vars(Type.of.feeding.interaction)) +
xlab("Prey Mass in grams") +
ylab("Predator Mass in grams") +
scale_x("Prey Mass in grams", labels = scales::scientific) +
scale_y("Predator Mass in grams", labels = scales::scientific) +
theme(legend.position = "bottom", legend.title = element_text(face = "bold"))
ggplot(df, aes(x = log(Prey.mass), y = log(Predator.mass), colour = Predator.lifestage)) +
geom_point(shape = 3) +
geom_smooth(method = 'lm', se = TRUE, fullrange = TRUE, size = 0.4) +
facet_grid(rows = vars(Type.of.feeding.interaction)) +
xlab("Prey Mass in grams") +
ylab("Predator Mass in grams") +
scale_x_continuous("Prey Mass in grams", labels = scales::scientific) +
scale_y_continuous("Predator Mass in grams", labels = scales::scientific) +
theme(legend.position = "bottom", legend.title = element_text(face = "bold"))
plot <- ggplot(df, aes(x = log(Prey.mass), y = log(Predator.mass), colour = Predator.lifestage)) +
geom_point(shape = 3) +
geom_smooth(method = 'lm', se = TRUE, fullrange = TRUE, size = 0.4) +
facet_grid(rows = vars(Type.of.feeding.interaction)) +
xlab("Prey Mass in grams") +
ylab("Predator Mass in grams") +
scale_x_continuous("Prey Mass in grams", labels = scales::scientific) +
scale_y_continuous("Predator Mass in grams", labels = scales::scientific) +
theme(legend.position = "bottom", legend.title = element_text(face = "bold"))
pdf("../results/PP_Regress.pdf")
print(plot)
dev.off
pdf("../results/PP_Regress.pdf")
print(plot)
dev.off()
pdf("../results/PP_Regress.pdf", paper = "a4")
print(plot)
dev.off()
plot <- ggplot(df, aes(x = log(Prey.mass), y = log(Predator.mass), colour = Predator.lifestage)) +
geom_point(shape = 3) +
geom_smooth(method = 'lm', se = TRUE, fullrange = TRUE, size = 0.4) +
facet_grid(rows = vars(Type.of.feeding.interaction), space = "free_y") +
xlab("Prey Mass in grams") +
ylab("Predator Mass in grams") +
scale_x_continuous("Prey Mass in grams", labels = scales::scientific) +
scale_y_continuous("Predator Mass in grams", labels = scales::scientific) +
theme(legend.position = "bottom", legend.title = element_text(face = "bold"))
pdf("../results/PP_Regress.pdf", paper = "a4")
print(plot)
dev.off()
plot <- ggplot(df, aes(x = log(Prey.mass), y = log(Predator.mass), colour = Predator.lifestage)) +
geom_point(shape = 3) +
geom_smooth(method = 'lm', se = TRUE, fullrange = TRUE, size = 0.4) +
facet_grid(rows = vars(Type.of.feeding.interaction), space = "free_y") +
theme(strip.text = element_text(size = 5))
xlab("Prey Mass in grams") +
ylab("Predator Mass in grams") +
scale_x_continuous("Prey Mass in grams", labels = scales::scientific) +
scale_y_continuous("Predator Mass in grams", labels = scales::scientific) +
theme(legend.position = "bottom", legend.title = element_text(face = "bold"))
plot <- ggplot(df, aes(x = log(Prey.mass), y = log(Predator.mass), colour = Predator.lifestage)) +
geom_point(shape = 3) +
geom_smooth(method = 'lm', se = TRUE, fullrange = TRUE, size = 0.4) +
facet_grid(rows = vars(Type.of.feeding.interaction), space = "free_y") +
theme(strip.text = element_text(size = 5)) +
xlab("Prey Mass in grams") +
ylab("Predator Mass in grams") +
scale_x_continuous("Prey Mass in grams", labels = scales::scientific) +
scale_y_continuous("Predator Mass in grams", labels = scales::scientific) +
theme(legend.position = "bottom", legend.title = element_text(face = "bold"))
pdf("../results/PP_Regress.pdf", paper = "a4")
print(plot)
dev.off()
plot <- ggplot(df, aes(x = log(Prey.mass), y = log(Predator.mass), colour = Predator.lifestage)) +
geom_point(shape = 3) +
geom_smooth(method = 'lm', se = TRUE, fullrange = TRUE, size = 0.4) +
facet_grid(rows = vars(Type.of.feeding.interaction), space = "free_y") +
theme(strip.text = element_text(size = 7)) +
xlab("Prey Mass in grams") +
ylab("Predator Mass in grams") +
scale_x_continuous("Prey Mass in grams", labels = scales::scientific) +
scale_y_continuous("Predator Mass in grams", labels = scales::scientific) +
theme(legend.position = "bottom", legend.title = element_text(face = "bold"))
pdf("../results/PP_Regress.pdf", paper = "a4")
print(plot)
dev.off()
splitdfs <- group_split(df, Type.of.feeding.interaction)
View(df)
splitdfs <- group_split(df, Predator.lifestage)
columns = c("Life stage", "Feeding type", "Slope", "Intercept")
regress_results <- as.data.frame(matrix(nrow = 0, ncol = length(columns)))
splitdfs <- group_split(df, Predator.lifestage)
for (lifestage in splitdfs){
insectmodel <- lm(log(lifestage$Predator.mass) ~ log(lifestage$Prey.mass))
insectcf <- coef(insectmodel)
insectintercept <- insectcf[1]
insectslope <- insectcf[2]
insectoutput <- c(lifestage$Predator.lifestage[1], "insectivorous", insectslope, insectintercept)
regress_results <- rbind(regress_results, insectoutput)
}
View(regress_results)
columns = c("Life stage", "Feeding type", "Slope", "Intercept")
regress_results <- as.data.frame(matrix(nrow = 0, ncol = length(columns)))
splitdfs <- group_split(df, Predator.lifestage)
for (lifestage in splitdfs){
insectmodel <- lm(log(lifestage$Predator.mass) ~ log(lifestage$Prey.mass))
insectcf <- coef(insectmodel)
insectintercept <- insectcf[1]
insectslope <- insectcf[2]
insectoutput <- c(lifestage$Predator.lifestage[1], "insectivorous", insectslope, insectintercept)
regress_results <- rbind(regress_results, insectoutput)
piscimodel <- lm(log(lifestage$Predator.mass) ~ log(lifestage$Prey.mass))
piscicf <- coef(piscimodel)
pisciintercept <- piscicf[1]
piscislope <- piscicf[2]
piscioutput <- c(lifestage$Predator.lifestage[1], "piscivorous", piscislope, pisciintercept)
regress_results <- rbind(regress_results, piscioutput)
plankmodel <- lm(log(lifestage$Predator.mass) ~ log(lifestage$Prey.mass))
plankcf <- coef(plankmodel)
plankintercept <- plankcf[1]
plankslope <- plankcf[2]
plankoutput <- c(lifestage$Predator.lifestage[1], "planktivorous", plankslope, plankintercept)
regress_results <- rbind(regress_results, plankoutput)
predmodel <- lm(log(lifestage$Predator.mass) ~ log(lifestage$Prey.mass))
predcf <- coef(predmodel)
predintercept <- predcf[1]
predslope <- predcf[2]
predoutput <- c(lifestage$Predator.lifestage[1], "predacious", predslope, predintercept)
regress_results <- rbind(regress_results, predoutput)
prepimodel <- lm(log(lifestage$Predator.mass) ~ log(lifestage$Prey.mass))
prepicf <- coef(prepimodel)
prepiintercept <- prepicf[1]
prepislope <- prepicf[2]
prepioutput <- c(lifestage$Predator.lifestage[1], "predacious/piscivorous", prepislope, prepiintercept)
regress_results <- rbind(regress_results, prepioutput)
}
colnames(regress_results) <- columns
write.csv(regress_results, "../results/PP_Regress_Results.csv")
